" vim:foldmethod=marker:foldlevel=0

" Not support Vi
set nocompatible

" PLUGGINS DEIN {{{1
function! s:prefix(str, args)
  return map(a:args, {_, s -> a:str . s})
endfunction

let s:has_exec_cache = {}
function! s:has_exec(command)
    if !has_key(s:has_exec_cache, a:command)
        let s:has_exec_cache[a:command] = executable(a:command)
    endif
    return s:has_exec_cache[a:command]
endfunction

set runtimepath+=/Users/artyomanikin/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.cache/dein')
  call dein#begin('~/.cache/dein')
  " Let dein manage dein
  " Required:
  call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

  " Navigation through vim windows and tmux panels
  call dein#add('christoomey/vim-tmux-navigator')

  " Buffer list on tabline
  call dein#add('ap/vim-buftabline')
  " Plugin for editing Ruby on Rails applications
  call dein#add('tpope/vim-rails', { 'on_ft': 'ruby' })
  " A set of mappings for HTML, XML, PHP, ASP, eRuby, JSP, and more
  call dein#add('tpope/vim-ragtag')
  " Wisely add `end` in ruby, endfunction/endif/more in vim script
  call dein#add('tpope/vim-endwise', {
    \ 'on_ft': 'ruby',
    \ 'on_event': 'InsertEnter'
  \ })
  " Commenting lines
  call dein#add('tpope/vim-commentary', {
    \ 'on_cmd': 'Commentary',
    \ 'on_map': 'gc'
  \ })
  " Git wrapper
  call dein#add('tpope/vim-fugitive', {
    \ 'if': s:has_exec('git')
  \ })
  " Move to github page on current line (:Gbrowse)
  call dein#add('tpope/vim-rhubarb', {
    \ 'depends': 'vim-fugitive',
    \ 'if': s:has_exec('git')
  \})
  " Show a diff using Vim its sign column
  call dein#add('mhinz/vim-signify', {
    \ 'if': has('signs') && s:has_exec('git')
  \ })
  " Insert or delete brackets, parens, quotes in pair
  call dein#add('jiangmiao/auto-pairs', {
    \ 'on_event': 'InsertEnter'
  \ })
  " Surrounding
  call dein#add('machakann/vim-sandwich')
  " Profiling vim startup
  call dein#add('tweekmonster/startuptime.vim', {
    \ 'on_cmd': 'StartupTime'
  \ })
  " Highlight yanked text
  call dein#add('machakann/vim-highlightedyank', {
    \ 'on_map': {
      \ 'n': ['yy', 'Y'],
      \ 'v': ['y']
    \ }
  \ })
  " Yank code to the clipboard (Remove spaces on start line)
  " call dein#add('AaronLasseigne/yank-code')
  " Multiline editing
  call dein#add('mg979/vim-visual-multi', {
    \ 'on_map': '<C-n>'
  \ })
  " Startup Screen
  call dein#add('mhinz/vim-startify')
  " ViFm Filemanager
  call dein#add('vifm/vifm.vim', {
    \ 'merged': 0,
    \ 'on_cmd': [
      \ 'EditVifm',
      \ 'Vifm',
      \ 'SplitVifm',
      \ 'VsplitVifm',
      \ 'DiffVifm',
      \ 'TabVifm',
    \ ]
  \ })
  " Filemanager
  call dein#add('Shougo/defx.nvim')
  if !has('nvim')
    call dein#add('roxma/nvim-yarp')
    call dein#add('roxma/vim-hug-neovim-rpc')
  endif
  " Show icons on Defx filemanager
  call dein#add('kristijanhusak/defx-icons', { 'depends': 'defx.nvim' })
  " Show git state on Defx filemanager
  call dein#add('kristijanhusak/defx-git', { 'depends': 'defx.nvim' })
  " FZF
  call dein#add('junegunn/fzf', { 'build': './install --all', 'merged': 0 })
  call dein#add('junegunn/fzf.vim', { 'depends': 'fzf' })
  " Snippets
  call dein#add('SirVer/ultisnips')
  call dein#add('honza/vim-snippets')
  " Git blame
  call dein#add('APZelos/blamer.nvim', {
    \ 'on_cmd': 'BlamerToggle'
  \ })
  " Weapon to fight against conflicts in Vim
  call dein#add('rhysd/conflict-marker.vim')
  " Vim/Ruby Configuration Files
  call dein#add('vim-ruby/vim-ruby', { 'on_ft': 'ruby' })
  " Auto close (X)HTML tags
  call dein#add('alvan/vim-closetag', { 'on_ft': ['html', 'javascript.jsx'] })
  " Automatically highlighting other uses of the current word under the cursor
  call dein#add('RRethy/vim-illuminate')
  " Asynchronously displaying the colours (need install Go)
  " Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
  " Run tests from Vim
  call dein#add('janko/vim-test', {
    \ 'on_cmd': [
      \ 'TestNearest',
      \ 'TestFile',
      \ 'TestSuite',
      \ 'TestLast',
      \ 'TestVisit'
    \ ]
  \ })
  " Interact with tmux
  call dein#add('benmills/vimux')
  " Opens the file manager or terminal at the directory of the current file in Vim
  " call dein#add('justinmk/vim-gtfo')
  " Switch between single-line and multiline forms of code
  call dein#add('andrewradev/splitjoin.vim', {
    \ 'on_cmd': s:prefix('Splitjoin', ['Join', 'Split']),
    \ 'on_map': { 'n': ['gJ', 'gS'] }
  \ })
  " Switch segments of text with predefined replacements
  call dein#add('andrewradev/switch.vim', {
    \ 'on_cmd': 'Switch',
    \ 'on_func': 'switch#Switch',
    \ 'on_map': { 'n': '-' }
  \ })
  " Change an HTML(ish) opening tag and take the closing one along as well
  call dein#add('AndrewRadev/tagalong.vim', {
    \ 'on_ft': 'html',
    \ 'on_event': 'InsertEnter'
  \ })
  " Multi-file search for Vim
  call dein#add('wincent/ferret', {
        \ 'on_cmd': 'Ack'
        \ })
  " Slim Syntax highlighting
  call dein#add('slim-template/vim-slim', { 'on_ft': 'html' })
  " CoffeeScript syntax highlighting
  call dein#add('kchmck/vim-coffee-script', { 'on_ft': 'coffee' })

  " Jumping to defitinitions
  " Plug 'pechorin/any-jump.vim'

  " Colorschemes
  call dein#add('morhetz/gruvbox')
  call dein#add('lifepillar/vim-gruvbox8')

  " Required:
  call dein#end()
  call dein#save_state()
endif
" }}}

" OPTIONS {{{1
" Count spaces for <Tab>
set tabstop=4
" Replace tab on spaces
set shiftwidth=2
set softtabstop=2
set expandtab

set background=dark

" Set Encoding
set encoding=utf-8
" Set UNIX fileformat
set fileformat=unix
" Show cursorline
set cursorline
" Show Entered command
set showcmd
" Minimal number of screen lines to keep above and below the cursor
set scrolloff=3
" Minimal number of screen columns to keep the left and to the right of the cursor
set sidescrolloff=5
" Enable 24-bit RGB color in the TUI
set termguicolors
" Show signcolumns (auto, yes, no)
set signcolumn=auto
" Enable mouse control
set mouse=a
" Wrap long lines
set linebreak
" Copy into system buffer
set clipboard=unnamed,unnamedplus
" Hide buffers insted of closing them even if they contain unwritten changes
set hidden
" Enable linenumber
set number
" Enable relative linenumber
set relativenumber

" Highlight all search matches
set hlsearch
" Show matching pattern when typing
set incsearch
" Ignore case sensitive
set ignorecase
" Override ignorecase if search patter contains upper case chars.
set smartcase

" Maintain undo history between sessions
set undofile
set undodir=~/.vim/undodir,/var/tmp,/tmp

" List of directories for the backup file
set backupdir=~/.vim/backupdir,/var/tmp,/tmp
" List of directory names for the swap files
set directory=~/.vim/swapdir,/var/tmp,/tmp

" Cursor can be positioned where there is no actual character
set virtualedit=all

" Open new split panes to bottom
set splitbelow
" Open new split panes to right
set splitright
" }}}

" AUTOGROUPS {{{1
" Remove trailing whitespace on save
autocmd! BufWritePre * :%s/\s\+$//e

" Change some <Tab> configs for different filetypes
autocmd FileType ruby,javascript,vue setlocal ts=2 sts=2 sw=2 et
autocmd FileType html,eruby,sass setlocal ts=4 sts=4 sw=4 et

" Add colorcolumn on Insert Mode
augroup ColorColumnOnlyInInsertMode
  autocmd!
  autocmd InsertEnter * let &colorcolumn="159,".join(range(159,999),",")
  autocmd BufRead,BufNewFile,InsertLeave * setlocal colorcolumn=0
augroup END

function! RelativeNumberActivity(mode)
    if &diff
        " For diffs, do nothing since we want relativenumbers in all windows.
        return
    endif
    if &buftype == "nofile" || &buftype == "nowrite"
        setlocal nonumber
    elseif a:mode == "active"
        setlocal relativenumber
        setlocal cursorline
    else
      setlocal norelativenumber
      setlocal nocursorline
    endif
endfunction

" Enable/Disable relativenumber for active panel
augroup CustomWindowActivity
    autocmd!
    autocmd WinEnter * call RelativeNumberActivity("active")
    autocmd WinLeave * call RelativeNumberActivity("inactive")
augroup END
" }}}

" MAPPINGS {{{1
" Leader key
let mapleader=','
" Swith between last two buffers
nnoremap <leader><leader> <C-^>

" Clear search highlight
nnoremap <leader>h :nohl<CR>
" Copy to end of line
nnoremap Y y$
" Move UP to the wrapping line
nnoremap k gk
" Move DOWN to the wrapping line
nnoremap j gj

" Move visual selection UP
vnoremap K :m '<-2<CR>gv=gv
" Move visual selection DOWN
vnoremap J :m '>+1<CR>gv=gv

" Keep text selected after indentation
vnoremap < <gv
vnoremap > >gv
vnoremap . :normal.<cr>

" Horizontal Split
nnoremap ss :split<CR>
" Vertical Split
nnoremap sv :vsplit<CR>

" Switch between panels
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Open next buffer
nnoremap <tab> :bnext<CR>
" Open prev buffer
nnoremap <S-tab> :bprevious<CR>
" Open first buffer
nnoremap <silent> [B :bfirst<CR>
" Open last buffer
nnoremap <silent> ]B :blast<CR>
" Close buffer
noremap  <leader>d :Bd<CR>
" Close all buffers
noremap  <leader>D :bufdo bd<CR>
" Close buffer without closing window
command! Bd :bp | :sp | :bn | :bd
" Command to copy the current file's full absolute path.
command CopyFilePath let @+ = expand('%:p')
" }}}

" ABBREVIATIONS {{{1
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Wq wq
cnoreabbrev WQ wq
cnoreabbrev Q! q!
cnoreabbrev Qa qa
cnoreabbrev Ц w
cnoreabbrev Цй wq
" }}}

" PLUGIN OPTIONS {{{1
" vim-buftabline {{{2
" Show buffers if > 2 buffers open
let g:buftabline_show = 1
" Show buff numeber
let g:buftabline_numbers = 2
" Indicate if buffers change
let g:buftabline_indicators = 1
" Enable/Disable buffer separator
let g:buftabline_separators = 0

" Switch between buffers
nmap <leader>1 <Plug>BufTabLine.Go(1)
nmap <leader>2 <Plug>BufTabLine.Go(2)
nmap <leader>3 <Plug>BufTabLine.Go(3)
nmap <leader>4 <Plug>BufTabLine.Go(4)
nmap <leader>5 <Plug>BufTabLine.Go(5)
nmap <leader>6 <Plug>BufTabLine.Go(6)
nmap <leader>7 <Plug>BufTabLine.Go(7)
nmap <leader>8 <Plug>BufTabLine.Go(8)
nmap <leader>9 <Plug>BufTabLine.Go(9)
nmap <leader>0 <Plug>BufTabLine.Go(10)
" }}}

" auto-paird {{{2
" Disable autoclose on multiline
let g:AutoPairsMultilineClose = 0
" }}}

" vim-signify {{{2
autocmd User Fugitive SignifyRefresh
let g:signify_vcs_list = ['git']
let g:signify_realtime = 0
" }}}

" Startify: Fancy startup screen for vim {{{2
" Don't change to directory when selecting a file
let g:startify_files_number = 8
let g:startify_change_to_dir = 0
let g:startify_custom_header = [ ]
let g:startify_relative_path = 1
let g:startify_use_env = 1

function! Listcommits()
  let git = 'git -C ' . getcwd()
  let commits = systemlist(git . ' log --oneline | head -n5')
  let git = 'G' . git[1:]
  return map(commits, '{"line": matchstr(v:val, "\\s\\zs.*"), "cmd": "'. git .' show ". matchstr(v:val, "^\\x\\+") }')
endfunction

" Custom startup list, only show MRU from current directory/project
let g:startify_lists = [
      \  { 'type': 'dir',       'header': [ 'Files '. getcwd() ] },
      \  { 'type': function('Listcommits'), 'header': [ 'Recent Commits' ] },
      \  { 'type': 'sessions',  'header': [ 'Sessions' ]       },
      \  { 'type': 'bookmarks', 'header': [ 'Bookmarks' ]      },
      \  { 'type': 'commands',  'header': [ 'Commands' ]       },
      \ ]

let g:startify_commands = [
      \   { 'up': [ 'Update Plugins', ':call dein#update()' ] },
      \   { 'uc': [ 'Recache runtimepath', ':call dein#recache_runtimepath()' ] },
      \ ]

let g:startify_bookmarks = [
      \ { 'c': '~/.vimrc' },
      \ { 'l': '~/.vimrc.local' },
      \ { 't': '~/.tmux.conf' },
      \ { 'g': '~/.gitconfig' },
      \ { 'z': '~/.zshrc' }
      \ ]

autocmd User Startified setlocal cursorline
nmap <leader>st :Startify<cr>
" }}}

" Defx {{{2
augroup vimrc_defx
  autocmd!
  autocmd FileType defx call s:defx_mappings()                                  "Defx mappings
  autocmd VimEnter * call s:setup_defx()
augroup END

nnoremap <silent><Leader>q :call <sid>defx_open()<CR>
nnoremap <silent><Leader>y :call <sid>defx_open({ 'find_current_file': v:true })<CR>
let s:default_columns = 'indent:git:icons:filename'

function! s:setup_defx() abort
  silent! call defx#custom#option('_', {
        \ 'columns': s:default_columns,
        \ })

  silent! call defx#custom#column('filename', {
        \ 'min_width': 80,
        \ 'max_width': 80,
        \ })

  silent! call s:defx_open({ 'dir': expand('<afile>') })
endfunction

function s:get_project_root() abort
  let l:git_root = ''
  let l:path = expand('%:p:h')
  let l:cmd = systemlist('cd '.l:path.' && git rev-parse --show-toplevel')
  if !v:shell_error && !empty(l:cmd)
    let l:git_root = fnamemodify(l:cmd[0], ':p:h')
  endif

  if !empty(l:git_root)
    return l:git_root
  endif

  return getcwd()
endfunction

function! s:defx_open(...) abort
  let l:opts = get(a:, 1, {})
  let l:is_file = has_key(l:opts, 'dir') && !isdirectory(l:opts.dir)

  if  &filetype ==? 'defx' || l:is_file
    return
  endif

  let l:path = s:get_project_root()

  if has_key(l:opts, 'dir') && isdirectory(l:opts.dir)
    let l:path = l:opts.dir
  endif

  let l:args = '-winwidth=40 -direction=topleft -split=vertical'

  if has_key(l:opts, 'find_current_file')
    call execute(printf('Defx %s -search=%s %s', l:args, expand('%:p'), l:path))
  else
    call execute(printf('Defx -toggle %s %s', l:args, l:path))
    " call execute('wincmd p')
  endif

  return execute("norm!\<C-w>=")
endfunction

function! s:defx_context_menu() abort
  let l:actions = ['new_multiple_files', 'rename', 'copy', 'move', 'paste', 'remove']
  let l:selection = confirm('Action?', "&New file/directory\n&Rename\n&Copy\n&Move\n&Paste\n&Delete")
  silent exe 'redraw'

  return feedkeys(defx#do_action(l:actions[l:selection - 1]))
endfunction

function s:defx_toggle_tree() abort
  if defx#is_directory()
    return defx#do_action('open_or_close_tree')
  endif
  return defx#do_action('drop')
endfunction

function! s:defx_mappings() abort
  nnoremap <silent><buffer>m :call <sid>defx_context_menu()<CR>
  nnoremap <silent><buffer><expr> o <sid>defx_toggle_tree()
  nnoremap <silent><buffer><expr> O defx#do_action('open_tree_recursive')
  nnoremap <silent><buffer><expr> <CR> <sid>defx_toggle_tree()
  nnoremap <silent><buffer><expr> h <sid>defx_toggle_tree()
  nnoremap <silent><buffer><expr> l <sid>defx_toggle_tree()
  nnoremap <silent><buffer><expr> <2-LeftMouse> <sid>defx_toggle_tree()
  nnoremap <silent><buffer><expr> C defx#is_directory() ? defx#do_action('multi', ['open', 'change_vim_cwd']) : 'C'
  nnoremap <silent><buffer><expr> s defx#do_action('open', 'botright vsplit')
  nnoremap <silent><buffer><expr> R defx#do_action('redraw')
  nnoremap <silent><buffer><expr> U defx#do_action('multi', [['cd', '..'], 'change_vim_cwd'])
  nnoremap <silent><buffer><expr> H defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> <Space> defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> j line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer> J :call search('[]')<CR>
  nnoremap <silent><buffer> K :call search('[]', 'b')<CR>
  nnoremap <silent><buffer><expr> yy defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> q defx#do_action('quit')
  silent exe 'nnoremap <silent><buffer><expr> tt defx#do_action("toggle_columns", "'.s:default_columns.':size:time")'
endfunction
" }}}

" FZF {{{2
let g:fzf_files_options = '--preview "(bat --color \"always\" --theme=\"Railscasts\" --style=numbers,changes --line-range 0:30 {}) 2> /dev/null | head -'.&lines.'"'
let branch_files_options = { 'source': '( git status --porcelain | awk ''{print $2}''; git diff --name-only HEAD $(git merge-base HEAD master) ) | sort | uniq'}
let uncommited_files_options = { 'source': '( git status --porcelain | awk ''{print $2}'' ) | sort | uniq'}
let s:diff_options =
  \ '--reverse ' .
  \ '--preview "(git diff --color=always master -- {} | tail -n +5 || bat {}) 2> /dev/null | head -'.&lines.'"'

command! BranchFiles call fzf#run(fzf#wrap('BranchFiles', extend(branch_files_options, { 'options': s:diff_options }), 0))
command! UncommitedFiles call fzf#run(fzf#wrap('UncommitedFiles', extend(uncommited_files_options, { 'options': s:diff_options }), 0))

" Searching via ripgrep with preview
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --colors="path:fg:cyan" --colors="path:style:underline" --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)
nnoremap \| :Rg<space>
nnoremap <leader>ga :Rg <c-r><c-w><cr>

imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.7, 'highlight': 'Comment', 'border': 'sharp' } }
let g:fzf_colors = {
      \ 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment']
      \ }
let g:fzf_colors = {
      \ 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Function'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'PreProc'],
      \ 'header':  ['fg', 'Comment']
      \ }
let g:fzf_action = {
      \ 'ctrl-s': 'split',
      \ 'ctrl-v': 'vsplit'
      \ }

nnoremap <silent> <C-p> :Files<cr>
nnoremap <silent> <leader>b :Buffers<CR>
nnoremap <silent> <leader>o :Lines<cr>
nnoremap <silent> <leader>gp :BranchFiles<cr>
nnoremap <silent> <leader>GP :UncommitedFiles<cr>
nnoremap <silent> <leader>gb :Gblame<cr>

nnoremap <leader>gm :Files app/models/<cr>
nnoremap <leader>gv :Files app/views/<cr>
nnoremap <leader>gc :Files app/controllers/<cr>
nnoremap <leader>gy :Files app/assets/stylesheets/<cr>
nnoremap <leader>gj :Files app/assets/javascripts/<cr>
nnoremap <leader>gs :Files spec/<cr>
nnoremap <leader>gw :Files app/javascript/<cr>

if has('nvim') && !exists('g:fzf_layout')
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
endif
" }}}

" UltiSnips {{{2
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
" }}}

" Blamer {{{2
" Enable blamer (:BlamerToggle to enable/disable)
let g:blamer_enabled = 0
" Delay for display blamer (Default: 1000)
let g:blamer_delay = 1000
" Dont show blamer in visual mode
let g:blamer_show_in_visual_modes = 0
" Blamer prefix (Default: ' ')
let g:blamer_prefix = '··············> '
" Info format
let g:blamer_template = '[<committer>] • <committer-time> • <summary>'
" Date format
let g:blamer_date_format = '%Y-%m-%d'
" Toggle blamer
nnoremap <leader>tb :BlamerToggle<cr>
" }}}

" Vim-illuminate {{{2
" Time in milliseconds (default 250)
let g:Illuminate_delay = 500
" Don't highlight word under cursor (default: 1)
let g:Illuminate_highlightUnderCursor = 0
" Enable it only for certain filetypes with
let g:Illuminate_ftwhitelist = ['vim', 'sh', 'ruby', 'javascript']
" }}}

" RRethy/vim-hexokinase {{{2
" Highlight method (available: virtual, sign_column, background, backgroundfull, foreground, foregroundfull)
let g:Hexokinase_highlighters = ['backgroundfull']
" Refresh Events (TextChanged, InsertLeave - scraping after text change; BufWrite and BufCreate by default)
let g:Hexokinase_refreshEvents = ['BufWrite', 'BufCreate', 'InsertLeave']
" }}}

" Vim-tests {{{2
let test#strategy = "vimux"
nnoremap <silent> <leader>tn :TestNearest<CR>
nnoremap <silent> <leader>tf :TestFile<CR>
nnoremap <silent> <leader>ts :TestSuite<CR>
nnoremap <silent> <leader>tl :TestLast<CR>
nnoremap <silent> <leader>tv :TestVisit<CR>
" }}}

" gtfo.vim {{{2
" gof opens Finder
" got opens Terminal
" User iterm terminal
let g:gtfo#terminals = { 'mac': 'iterm' }
" }}}

" tpope/vim-rails {{{2
" Add map for alternative file in Ruby project
autocmd FileType ruby nnoremap <leader>a :A<cr>
" }}}

" Any-jump {{{2
" Show line numbers in search rusults
" let g:any_jump_list_numbers = 0

" Auto search references
" let g:any_jump_references_enabled = 1

" Auto group results by filename
let g:any_jump_grouping_enabled = 1

" Amount of preview lines for each search result
let g:any_jump_preview_lines_count = 10

" Max search results, other results can be opened via [a]
let g:any_jump_max_search_results = 7

" Prefered search engine: rg or ag
let g:any_jump_search_prefered_engine = 'rg'


" Search results list styles:
" - 'filename_first'
" - 'filename_last'
let g:any_jump_results_ui_style = 'filename_first'


" Any-jump window size & position options
let g:any_jump_window_width_ratio  = 0.6
let g:any_jump_window_height_ratio = 0.6
let g:any_jump_window_top_offset   = 4

" Remove comments line from search results (default: 1)
let g:any_jump_remove_comments_from_results = 1

" Cursor keyword selection mode (full, word)
let g:any_jump_keyword_match_cursor_mode = 'full'
" }}}
"
" vim-fugitive {{{2
nnoremap gs :Gstatus<cr>
" }}}

" switch.vim {{{2
let g:switch_mapping = "-"
" }}}

" Vifm {{{2
nnoremap <space> :EditVifm<CR>
" }}}
" }}}

" Enable syntax highlighting
syntax on
" Enable filetype detection
filetype on
" Enable filetype-specific indenting
filetype indent on
" Enable filetype-specific plugins
filetype plugin indent on
runtime macros/matchit.vim

" Local config {{{1
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
" }}}

" Highlight customization {{{

" Add Some italic style
highlight Comment gui=italic cterm=italic
highlight htmlArg gui=italic cterm=italic
highlight Folded gui=italic cterm=italic
highlight String gui=italic cterm=italic

" highlight SignColumn same color as LineNr
highlight! link SignColumn LineNr

" change color for highlight yank text
highlight HighlightedyankRegion guibg=#AFB322 guifg=#35312F

" highlight colorcolumn
highlight! link ColorColumn CursorLine

" custom for diff
highlight DiffAdd    term=bold ctermfg=0 ctermbg=2 guifg=#2b2b2b guibg=#a5c261
highlight DiffDelete term=bold ctermfg=0 ctermbg=1 gui=bold guifg=#2b2b2b guibg=#da4939
highlight DiffChange term=bold ctermfg=0 ctermbg=4 guifg=#2b2b2b guibg=#6d9cbe
highlight DiffText   term=reverse cterm=bold ctermfg=0 ctermbg=4 gui=bold guifg=#2b2b2b guibg=#6d9cbe
" }}}

source $HOME/.vim/modules/statusline.vim
